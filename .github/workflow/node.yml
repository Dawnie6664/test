name: Node.js CI

on:
  push:
    branches: [ master ]
  
jobs:
  build_test:

    name: Build & Test App

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
    if: "contains(github.event.commits[0].message, '[build app]')"
    steps:
    - uses: actions/checkout@v2
    - name: setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          npm install
          npm ci 
      
      - name: build & test
        run: |
          npm run build
          npm run test

  push_to_Docker_Hub:
      name: Push Images to DockerHub
      runs-on: ubuntu-latest
      needs: [build_test]


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: 1.0
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
