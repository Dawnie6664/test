name: Node.js CI

on:
  push:
     tags:
     -  v[0-9]+.[0-9]+.[0-9]+-RC
jobs:
  build_test:

    name: Build & Test App

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: setup node
      uses: actions/setup-node@master
      with:
          node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
          npm install
          npm ci
       
    -  name: Extract branch
       id: extract_branch 
       shell: bash
       run: |
           echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/tags/})"
           echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"       
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - uses: kanga333/variable-mapper@master
      id: export
      with:
        key: "${{github.base_ref}}"
        map: |
          {
            "production": {
              "environment"  : "production",
              "ecs_cluster"  : "${{ secrets.PROD_ECS_CLUSTER }}",
              "ecs_container": "${{ secrets.PROD_ECS_CONTAINER }}",
              "ecs_service"  : "${{ secrets.PROD_ECS_SERVICE }}",
              "repo_name"    : "${{ secrets.PROD_REPO_NAME }}"
            },
            "staging": {
              "environment"  : "staging",
              "ecs_cluster"  : "${{ secrets.STG_ECS_CLUSTER }}",
              "ecs_container": "${{ secrets.STG_ECS_CONTAINER }}",
              "ecs_service"  : "${{ secrets.STG_ECS_SERVICE }}",
              "repo_name"    : "${{ secrets.STG_REPO_NAME }}"
            },
            "development": {
              "environment"  : "development",
              "ecs_cluster"  : "${{ secrets.DEV_ECS_CLUSTER }}",
              "ecs_container": "${{ secrets.DEV_ECS_CONTAINER }}",
              "ecs_service"  : "${{ secrets.DEV_ECS_SERVICE }}",
              "repo_name"    : "${{ secrets.DEV_REPO_NAME }}"
            }
          }
        export_to: env,secrets,outputs
    - name: Echo environment and output
      run: |
        echo "${{ steps.export.outputs.repo_name }}"
        echo "${{ steps.export.outputs.ecs_container }}"
        echo "${{ steps.export.outputs.ecs_service }}"
        echo "${{ steps.export.outputs.ecs_cluster }}"
        
    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.export.outputs.repo_name }}
        IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.sha_short }}
      run: |
        echo " $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download task definition
      run: |
          aws ecs describe-task-definition --task-definition ${{steps.export.outputs.ecs_container}} \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{steps.export.outputs.ecs_container}}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ steps.export.outputs.ecs_service }}
        cluster: ${{ steps.export.outputs.ecs_cluster }}
        wait-for-service-stability: true
